<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\My_AT32_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\My_AT32_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 03 16:30:14 2022
<BR><P>
<H3>Maximum Stack Usage =        204 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
OTGFS1_IRQHandler &rArr; usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[34]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">ADC1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[1c]">BusFault_Handler</a> from at32wb415_int.o(i.BusFault_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[36]">CAN1_RX0_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[37]">CAN1_RX1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[38]">CAN1_SE_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[35]">CAN1_TX_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[51]">CMP1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[52]">CMP2_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[27]">CRM_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel2_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel3_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[30]">DMA1_Channel4_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[31]">DMA1_Channel5_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[32]">DMA1_Channel6_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[33]">DMA1_Channel7_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel2_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel3_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel4_5_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[53]">DMA2_Channel6_7_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[1f]">DebugMon_Handler</a> from at32wb415_int.o(i.DebugMon_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[48]">ERTCAlarm_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[25]">ERTC_WKUP_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[28]">EXINT0_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[47]">EXINT15_10_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[29]">EXINT1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[2a]">EXINT2_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[2b]">EXINT3_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[2c]">EXINT4_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[39]">EXINT9_5_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[26]">FLASH_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[1a]">HardFault_Handler</a> from at32wb415_int.o(i.HardFault_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[42]">I2C1_ERR_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[41]">I2C1_EVT_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[58]">Led2_Task</a> from led_task.o(i.Led2_Task) referenced from start_task.o(i.start_task)
 <LI><a href="#[59]">Led3_Task</a> from led_task.o(i.Led3_Task) referenced from start_task.o(i.start_task)
 <LI><a href="#[1b]">MemManage_Handler</a> from at32wb415_int.o(i.MemManage_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[19]">NMI_Handler</a> from at32wb415_int.o(i.NMI_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[50]">OTGFS1_IRQHandler</a> from usb_task.o(i.OTGFS1_IRQHandler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[49]">OTGFS1_WKUP_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[23]">PVM_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[20]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[1e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[21]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_at32wb415.o(i.SystemInit) referenced from startup_at32wb415.o(.text)
 <LI><a href="#[24]">TAMP_STAMP_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[3a]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[3d]">TMR1_CH_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[3b]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[3c]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[3e]">TMR2_GLOBAL_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[3f]">TMR3_GLOBAL_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[40]">TMR4_GLOBAL_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[4a]">TMR5_GLOBAL_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[44]">USART1_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from at32wb415_int.o(i.USART2_IRQHandler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from at32wb415_int.o(i.USART3_IRQHandler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[1d]">UsageFault_Handler</a> from at32wb415_int.o(i.UsageFault_Handler) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[22]">WWDT_IRQHandler</a> from startup_at32wb415.o(.text) referenced from startup_at32wb415.o(RESET)
 <LI><a href="#[5b]">__main</a> from __main.o(!!!main) referenced from startup_at32wb415.o(.text)
 <LI><a href="#[6]">class_clear_handler</a> from cdc_class.o(i.class_clear_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[9]">class_ept0_rx_handler</a> from cdc_class.o(i.class_ept0_rx_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[8]">class_ept0_tx_handler</a> from cdc_class.o(i.class_ept0_tx_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[d]">class_event_handler</a> from cdc_class.o(i.class_event_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[a]">class_in_handler</a> from cdc_class.o(i.class_in_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[5]">class_init_handler</a> from cdc_class.o(i.class_init_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[b]">class_out_handler</a> from cdc_class.o(i.class_out_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[7]">class_setup_handler</a> from cdc_class.o(i.class_setup_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[c]">class_sof_handler</a> from cdc_class.o(i.class_sof_handler) referenced 2 times from cdc_class.o(.data)
 <LI><a href="#[17]">get_device_config_string</a> from cdc_desc.o(i.get_device_config_string) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[10]">get_device_configuration</a> from cdc_desc.o(i.get_device_configuration) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[e]">get_device_descriptor</a> from cdc_desc.o(i.get_device_descriptor) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[16]">get_device_interface_string</a> from cdc_desc.o(i.get_device_interface_string) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[12]">get_device_lang_id</a> from cdc_desc.o(i.get_device_lang_id) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[13]">get_device_manufacturer_string</a> from cdc_desc.o(i.get_device_manufacturer_string) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[11]">get_device_other_speed</a> from cdc_desc.o(i.get_device_other_speed) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[14]">get_device_product_string</a> from cdc_desc.o(i.get_device_product_string) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[f]">get_device_qualifier</a> from cdc_desc.o(i.get_device_qualifier) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[15]">get_device_serial_string</a> from cdc_desc.o(i.get_device_serial_string) referenced 2 times from cdc_desc.o(.data)
 <LI><a href="#[5a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[56]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[57]">start_task</a> from start_task.o(i.start_task) referenced from start_task.o(i.startTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[12e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[12f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[130]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[131]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[132]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[133]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[134]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[135]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[136]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[137]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[138]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[139]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[140]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[141]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[142]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[143]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[144]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[67]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[5d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[63]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; usart3_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[66]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[150]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[68]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[20]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTGFS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32wb415.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32wb415.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[152]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[153]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[65]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32wb415_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Led2_Task</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, led_task.o(i.Led2_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Led2_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[59]"></a>Led3_Task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_task.o(i.Led3_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Led3_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[1b]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32wb415_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_task.o(i.OTGFS1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = OTGFS1_IRQHandler &rArr; usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, system_at32wb415.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, at32wb415_int.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, at32wb415_int.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32wb415.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_board.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[76]"></a>adc1_config</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp_adc.o(i.adc1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc1_config &rArr; adc_ordinary_channel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_adc_clock_div_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempersensor_vintrv_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_trigger_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_status_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init_status_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_default_para_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>adc_base_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_base_config))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[79]"></a>adc_base_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_base_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[80]"></a>adc_calibration_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_calibration_init))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[81]"></a>adc_calibration_init_status_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_calibration_init_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[82]"></a>adc_calibration_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_calibration_start))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[83]"></a>adc_calibration_status_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_calibration_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[7d]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[7f]"></a>adc_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[7b]"></a>adc_ordinary_channel_set</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, at32wb415_adc.o(i.adc_ordinary_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[7c]"></a>adc_ordinary_conversion_trigger_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_ordinary_conversion_trigger_set))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[7e]"></a>adc_tempersensor_vintrv_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_adc.o(i.adc_tempersensor_vintrv_enable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[84]"></a>at32_board_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at32wb415_board.o(i.at32_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at32_board_init &rArr; at32_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_off
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_button_init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>at32_button_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at32wb415_board.o(i.at32_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = at32_button_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_board_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>at32_led_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, at32wb415_board.o(i.at32_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = at32_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_board_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>at32_led_off</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32wb415_board.o(i.at32_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_board_init
</UL>

<P><STRONG><a name="[6e]"></a>at32_led_on</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32wb415_board.o(i.at32_led_on))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2_Task
</UL>

<P><STRONG><a name="[71]"></a>at32_led_toggle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, at32wb415_board.o(i.at32_led_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led3_Task
</UL>

<P><STRONG><a name="[78]"></a>crm_adc_clock_div_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_adc_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[cd]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[cf]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[ce]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d0]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[ca]"></a>crm_clock_source_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[95]"></a>crm_clocks_freq_get</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, at32wb415_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[124]"></a>crm_flag_clear</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[cb]"></a>crm_flag_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32wb415_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[77]"></a>crm_periph_clock_enable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32wb415_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cdc_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_button_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[cc]"></a>crm_pll_config</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, at32wb415_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[c9]"></a>crm_reset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d1]"></a>crm_sysclk_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[96]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[db]"></a>crm_usb_clock_div_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32wb415_crm.o(i.crm_usb_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>

<P><STRONG><a name="[85]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32wb415_board.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_board_init
</UL>

<P><STRONG><a name="[9d]"></a>dma_channel_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_dma.o(i.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
</UL>

<P><STRONG><a name="[99]"></a>dma_config</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_adc.o(i.dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_config &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>dma_default_para_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32wb415_dma.o(i.dma_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
</UL>

<P><STRONG><a name="[9c]"></a>dma_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, at32wb415_dma.o(i.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
</UL>

<P><STRONG><a name="[9a]"></a>dma_reset</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, at32wb415_dma.o(i.dma_reset))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
</UL>

<P><STRONG><a name="[89]"></a>gpio_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32wb415_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cdc_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_button_init
</UL>

<P><STRONG><a name="[8a]"></a>gpio_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, at32wb415_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_button_init
</UL>

<P><STRONG><a name="[d6]"></a>gpio_pin_remap_config</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, at32wb415_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[a1]"></a>led4_pwm_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bsp_pwm.o(i.led4_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = led4_pwm_init &rArr; tmr_output_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_buffer_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_default_para_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_buffer_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; usart3_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cdc_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_led_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_button_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_board_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ab]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32wb415_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cdc_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32wb415_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>pvPortMalloc</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[c0]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b1]"></a>startTask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, start_task.o(i.startTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = startTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>start_task</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, start_task.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = start_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.startTask)
</UL>
<P><STRONG><a name="[ac]"></a>system_clock_config</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, at32wb415_clock.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>system_core_clock_update</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, system_at32wb415.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[98]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32wb415_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[a2]"></a>tmr_base_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_base_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[70]"></a>tmr_channel_value_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_channel_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2_Task
</UL>

<P><STRONG><a name="[a4]"></a>tmr_clock_source_div_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_clock_source_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[a3]"></a>tmr_cnt_dir_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_cnt_dir_set))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[a9]"></a>tmr_counter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_counter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[a7]"></a>tmr_output_channel_buffer_enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at32wb415_tmr.o(i.tmr_output_channel_buffer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_output_channel_buffer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[a6]"></a>tmr_output_channel_config</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, at32wb415_tmr.o(i.tmr_output_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tmr_output_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[a5]"></a>tmr_output_default_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_output_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[a8]"></a>tmr_period_buffer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_tmr.o(i.tmr_period_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led4_pwm_init
</UL>

<P><STRONG><a name="[ad]"></a>uart_print_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, at32wb415_board.o(i.uart_print_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_print_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>usart3_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, bsp_usart.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usart3_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32wb415_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
</UL>

<P><STRONG><a name="[74]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32wb415_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>usart_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, at32wb415_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
</UL>

<P><STRONG><a name="[d8]"></a>usart_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, at32wb415_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[d7]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[d4]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_init
</UL>

<P><STRONG><a name="[af]"></a>usb_cdc_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_task.o(i.usb_cdc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = usb_cdc_init &rArr; usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock48m_select
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>usb_clock48m_select</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_task.o(i.usb_clock48m_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_clock48m_select
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_usb_clock_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cdc_init
</UL>

<P><STRONG><a name="[e5]"></a>usb_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_connect))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[10f]"></a>usb_core_config</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usb_core.o(i.usb_core_config))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[100]"></a>usb_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
</UL>

<P><STRONG><a name="[105]"></a>usb_ept0_setup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_ept0_setup))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>

<P><STRONG><a name="[11e]"></a>usb_ept0_start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_ept0_start))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[e3]"></a>usb_ept_clear_stall</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, at32wb415_usb.o(i.usb_ept_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_stall
</UL>

<P><STRONG><a name="[106]"></a>usb_ept_close</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, at32wb415_usb.o(i.usb_ept_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_close
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_close
</UL>

<P><STRONG><a name="[eb]"></a>usb_ept_default_init</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, usbd_core.o(i.usb_ept_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[10d]"></a>usb_ept_in_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_ept_in_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[10c]"></a>usb_ept_in_interrupt</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, at32wb415_usb.o(i.usb_ept_in_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_in_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[107]"></a>usb_ept_open</STRONG> (Thumb, 416 bytes, Stack size 12 bytes, at32wb415_usb.o(i.usb_ept_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>

<P><STRONG><a name="[11c]"></a>usb_ept_out_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_ept_out_clear))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[11b]"></a>usb_ept_out_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_ept_out_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[121]"></a>usb_ept_stall</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, at32wb415_usb.o(i.usb_ept_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ept_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
</UL>

<P><STRONG><a name="[f0]"></a>usb_flush_rx_fifo</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_flush_rx_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[ef]"></a>usb_flush_tx_fifo</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, at32wb415_usb.o(i.usb_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_flush_tx_fifo
</UL>

<P><STRONG><a name="[10b]"></a>usb_get_all_in_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_get_all_in_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[11a]"></a>usb_get_all_out_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_get_all_out_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[111]"></a>usb_global_clear_interrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_global_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[110]"></a>usb_global_get_all_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_global_get_all_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[dc]"></a>usb_global_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at32wb415_usb.o(i.usb_global_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_global_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[11f]"></a>usb_global_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_global_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
</UL>

<P><STRONG><a name="[dd]"></a>usb_global_reset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_global_reset))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
</UL>

<P><STRONG><a name="[10e]"></a>usb_global_select_core</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_global_select_core))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[ed]"></a>usb_global_set_mode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_global_set_mode))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[ec]"></a>usb_interrupt_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[f2]"></a>usb_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[ee]"></a>usb_open_phy_clk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_open_phy_clk))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_wakeup_handler
</UL>

<P><STRONG><a name="[120]"></a>usb_read_packet</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, at32wb415_usb.o(i.usb_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
</UL>

<P><STRONG><a name="[11d]"></a>usb_set_address</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[108]"></a>usb_set_rx_fifo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_set_rx_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>

<P><STRONG><a name="[109]"></a>usb_set_tx_fifo</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, at32wb415_usb.o(i.usb_set_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_set_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>

<P><STRONG><a name="[103]"></a>usb_stop_phy_clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_stop_phy_clk))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>

<P><STRONG><a name="[102]"></a>usb_suspend_status_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_usb.o(i.usb_suspend_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>

<P><STRONG><a name="[de]"></a>usb_write_empty_txfifo</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usbd_int.o(i.usb_write_empty_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_write_empty_txfifo &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[df]"></a>usb_write_packet</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, at32wb415_usb.o(i.usb_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_empty_txfifo
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>

<P><STRONG><a name="[e2]"></a>usbd_clear_stall</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_clear_stall &rArr; usb_ept_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
</UL>

<P><STRONG><a name="[e4]"></a>usbd_connect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[e6]"></a>usbd_core_in_handler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_core_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbd_core_in_handler &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
</UL>

<P><STRONG><a name="[e9]"></a>usbd_core_init</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, usbd_core.o(i.usbd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_disable
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_set_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_rx_fifo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[f3]"></a>usbd_core_out_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_core_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_core_out_handler &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[f4]"></a>usbd_core_setup_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_core_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_parse
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
</UL>

<P><STRONG><a name="[93]"></a>usbd_ctrl_recv</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, usbd_core.o(i.usbd_ctrl_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_ctrl_recv &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
</UL>

<P><STRONG><a name="[e8]"></a>usbd_ctrl_recv_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctrl_recv_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_ctrl_recv_status &rArr; usbd_ept_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[92]"></a>usbd_ctrl_send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_ctrl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
</UL>

<P><STRONG><a name="[e1]"></a>usbd_ctrl_send_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctrl_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_feature
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
</UL>

<P><STRONG><a name="[94]"></a>usbd_ctrl_unsupport</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctrl_unsupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctrl_unsupport &rArr; usbd_set_stall &rArr; usb_ept_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_interface_request
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[f6]"></a>usbd_device_request</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_device_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_feature
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_status
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_configuration
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_feature
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[ea]"></a>usbd_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
</UL>

<P><STRONG><a name="[f8]"></a>usbd_endpoint_request</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, usbd_sdr.o(i.usbd_endpoint_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usbd_endpoint_request &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_stall
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[101]"></a>usbd_enter_suspend</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_enter_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_enter_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_suspend_status_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend_handler
</UL>

<P><STRONG><a name="[104]"></a>usbd_enumdone_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_enumdone_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_enumdone_handler &rArr; usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept0_setup
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[8b]"></a>usbd_ept_close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_ept_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ept_close &rArr; usb_ept_close
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_clear_handler
</UL>

<P><STRONG><a name="[90]"></a>usbd_ept_open</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_ept_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_open
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>

<P><STRONG><a name="[91]"></a>usbd_ept_recv</STRONG> (Thumb, 276 bytes, Stack size 28 bytes, usbd_core.o(i.usbd_ept_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_ept_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv_status
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[e7]"></a>usbd_ept_send</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, usbd_core.o(i.usbd_ept_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>

<P><STRONG><a name="[f1]"></a>usbd_fifo_alloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_fifo_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_tx_fifo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
</UL>

<P><STRONG><a name="[8e]"></a>usbd_flush_tx_fifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_flush_tx_fifo &rArr; usb_flush_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_in_handler
</UL>

<P><STRONG><a name="[8c]"></a>usbd_get_recv_len</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_get_recv_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_get_recv_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_out_handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_ept0_rx_handler
</UL>

<P><STRONG><a name="[116]"></a>usbd_incomisioin_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_incomisioin_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_incomisioin_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[117]"></a>usbd_incomisoout_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_incomisoout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_incomisoout_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[10a]"></a>usbd_inept_handler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_inept_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_inept_handler &rArr; usbd_core_in_handler &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_all_in_interrupt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_in_interrupt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_in_clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write_empty_txfifo
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_in_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[da]"></a>usbd_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, usb_core.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usbd_init &rArr; usbd_core_init &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_select_core
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_config
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cdc_init
</UL>

<P><STRONG><a name="[f7]"></a>usbd_interface_request</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_interface_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_interface_request &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[72]"></a>usbd_irq_handler</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = usbd_irq_handler &rArr; usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_get_all_interrupt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_clear_interrupt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_wakeup_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_sof_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxflvl_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_outept_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_inept_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_incomisoout_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_incomisioin_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enumdone_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGFS1_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>usbd_outept_handler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_outept_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usbd_outept_handler &rArr; usbd_core_setup_handler &rArr; usbd_device_request &rArr; usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_all_out_interrupt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_out_interrupt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_out_clear
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_out_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[113]"></a>usbd_reset_handler</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_reset_handler &rArr; usbd_fifo_alloc &rArr; usb_set_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_address
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_flush_tx_fifo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept0_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[115]"></a>usbd_rxflvl_handler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usbd_int.o(i.usbd_rxflvl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_rxflvl_handler &rArr; usb_read_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read_packet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_global_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[f9]"></a>usbd_set_stall</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_set_stall &rArr; usb_ept_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ept_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_endpoint_request
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
</UL>

<P><STRONG><a name="[f5]"></a>usbd_setup_request_parse</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_sdr.o(i.usbd_setup_request_parse))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_setup_handler
</UL>

<P><STRONG><a name="[114]"></a>usbd_sof_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_sof_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[119]"></a>usbd_suspend_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_suspend_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_suspend_handler &rArr; usbd_enter_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enter_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[118]"></a>usbd_wakeup_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_wakeup_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_open_phy_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_irq_handler
</UL>

<P><STRONG><a name="[b4]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c1]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[bf]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b6]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[b5]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[b8]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ba]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[bd]"></a>vPortFree</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[129]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6f]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led3_Task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2_Task
</UL>

<P><STRONG><a name="[c8]"></a>vTaskDelete</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[b2]"></a>vTaskStartScheduler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6a]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[126]"></a>wdt_divider_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32wb415_wdt.o(i.wdt_divider_set))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[128]"></a>wdt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32wb415_wdt.o(i.wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[b0]"></a>wdt_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_wdt.o(i.wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_init &rArr; crm_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reload_value_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_register_write_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_divider_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>wdt_register_write_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32wb415_wdt.o(i.wdt_register_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[127]"></a>wdt_reload_value_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32wb415_wdt.o(i.wdt_reload_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[123]"></a>xPortStartScheduler</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[c7]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTask
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[73]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c6]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b3]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[b7]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[bb]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[bc]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5a]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[be]"></a>prvInitialiseNewTask</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[b9]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[122]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c4]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c5]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[56]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[e0]"></a>usbd_clear_feature</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_clear_feature &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[fe]"></a>usbd_get_configuration</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_get_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_get_configuration &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[fd]"></a>usbd_get_descriptor</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, usbd_sdr.o(i.usbd_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbd_get_descriptor &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[fa]"></a>usbd_get_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_get_status &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[fc]"></a>usbd_set_address</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_sdr.o(i.usbd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_set_address &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[ff]"></a>usbd_set_configuration</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_set_configuration &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[fb]"></a>usbd_set_feature</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_sdr.o(i.usbd_set_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_set_feature &rArr; usbd_ctrl_send_status &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_request
</UL>

<P><STRONG><a name="[8f]"></a>cdc_struct_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cdc_class.o(i.cdc_struct_init))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_init_handler
</UL>

<P><STRONG><a name="[6]"></a>class_clear_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cdc_class.o(i.class_clear_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = class_clear_handler &rArr; usbd_ept_close &rArr; usb_ept_close
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>class_ept0_rx_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cdc_class.o(i.class_ept0_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = class_ept0_rx_handler &rArr; usb_vcp_cmd_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_cmd_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_recv_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>class_ept0_tx_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdc_class.o(i.class_ept0_tx_handler))
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>class_event_handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cdc_class.o(i.class_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>class_in_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cdc_class.o(i.class_in_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = class_in_handler &rArr; usbd_flush_tx_fifo &rArr; usb_flush_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_flush_tx_fifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>class_init_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cdc_class.o(i.class_init_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = class_init_handler &rArr; usbd_ept_open &rArr; usb_ept_open
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_struct_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_recv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ept_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>class_out_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cdc_class.o(i.class_out_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = class_out_handler &rArr; usbd_get_recv_len
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_recv_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>class_setup_handler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, cdc_class.o(i.class_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = class_setup_handler &rArr; usbd_ctrl_send &rArr; usbd_ept_send &rArr; usb_write_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_cmd_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_unsupport
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_send
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctrl_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>class_sof_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cdc_class.o(i.class_sof_handler))
<BR>[Address Reference Count : 1]<UL><LI> cdc_class.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>usb_vcp_cmd_process</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, cdc_class.o(i.usb_vcp_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_vcp_cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_setup_handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_ept0_rx_handler
</UL>

<P><STRONG><a name="[17]"></a>get_device_config_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_desc.o(i.get_device_config_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_config_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>get_device_configuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_desc.o(i.get_device_configuration))
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>get_device_descriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_desc.o(i.get_device_descriptor))
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>get_device_interface_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_desc.o(i.get_device_interface_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_interface_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>get_device_lang_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_desc.o(i.get_device_lang_id))
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>get_device_manufacturer_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_desc.o(i.get_device_manufacturer_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_manufacturer_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>get_device_other_speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_desc.o(i.get_device_other_speed))
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>get_device_product_string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_desc.o(i.get_device_product_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_device_product_string &rArr; usbd_unicode_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_unicode_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>get_device_qualifier</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc_desc.o(i.get_device_qualifier))
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>get_device_serial_string</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cdc_desc.o(i.get_device_serial_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_device_serial_string &rArr; get_serial_num &rArr; usbd_int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_desc.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>get_serial_num</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cdc_desc.o(i.get_serial_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_serial_num &rArr; usbd_int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_serial_string
</UL>

<P><STRONG><a name="[a0]"></a>usbd_int_to_unicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, cdc_desc.o(i.usbd_int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_num
</UL>

<P><STRONG><a name="[9e]"></a>usbd_unicode_convert</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, cdc_desc.o(i.usbd_unicode_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_unicode_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_product_string
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_manufacturer_string
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_interface_string
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_config_string
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
